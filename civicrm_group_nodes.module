<?php

/**
 * @file
 * A simple module that syncs contacts in a group to Backdrop nodes.
 */

/**
 * Implements hook_config_info().
 */
function civicrm_group_nodes_config_info() {
  $prefixes['civicrm_group_nodes.rules'] = array(
    'group' => t('CiviCRM Group Nodes rules'),
    'name_key' => 'machine_name',
    'label_key' => 'title',
  );
  $prefixes['civicrm_group_nodes.settings'] = array(
    'label' => t('CiviCRM Group Nodes settings'),
    'group' => t('CiviCRM'),
  );
  return $prefixes;
}

/**
 * Implements hook_preset_types().
 */
function civicrm_group_nodes_preset_types() {
  return array(
    'rules' => array(
      'name' => 'CiviCRM Group Nodes Rule',
      'path' => 'admin/config/civicrm/civicrm_group_nodes',
      'path_title' => 'CiviCRM Group Nodes',
      'path_description' => 'Configure rules for syncing CiviCRM Group Nodes.',
      'id_name' => 'Name',
      'columns' => array(
        'group' => 'Group',
        'content_type' => 'Content type',
      ),
      'group' => t('CiviCRM Group Nodes rules'),
    ),
  );
}

/**
 * Implements hook_preset_form().
 */
function civicrm_group_nodes_preset_form($preset_type, $id) {
  $form = array();
  $config = config('civicrm_group_nodes.' . $preset_type . '.' . $id);

  // Get CiviCRM groups as options for checkboxes.
  $group_options = array();
  civicrm_initialize();
  foreach ($groups as $group) {
    $group_options[$group['id']] = $group['title'];
  }

  if ($preset_type == 'rules') {
    $form['group'] = array(
      '#type' => 'select',
      '#title' => t('CiviCRM Groups'),
      '#description' => t('Select the CiviCRM group you would like to sync.'),
      '#options' => $group_options,
      '#default_value' => !empty($config->get('group')) ? intval($config->get('group')) : array(),
      '#required' => TRUE,
    );
    $form['content_type'] = array(
      '#type' => 'select',
      '#title' => t('Content type'),
      '#description' => t('Select the content type you would like to sync. If needed, we will create a field to reference the CiviCRM contact.'),
      '#options' => node_type_get_names(),
      '#default_value' => !empty($config->get('content_type')) ? $config->get('content_type') : array(),
      '#required' => TRUE,
    );
  }
  $form['#submit'][] = 'civicrm_group_nodes_rules_submit';

  return $form;
}

/**
 * Form submission handler for civicrm_group_nodes_preset_form() for sync rules.
 *
 * Used to make sure the content type has a CiviCRM Contact Reference field
 * that we can use (and if not, to create one).
 */
function civicrm_group_nodes_rules_submit($form, &$form_state) {
  $content_type = $form_state['values']['content_type'];
  $content_type_fields = field_info_instances('node', $content_type);
  $contact_ref_field_instance_exists = FALSE;
  foreach ($content_type_fields as $field) {
    if ($field['field_name'] == 'civicrm_group_nodes_contact_ref' && $field['widget']['type'] == 'civicrm_contact_ref_autocomplete') {
      $contact_ref_field_instance_exists = TRUE;
      break;
    }
  }
  $t = get_t();
  if (!$contact_ref_field_instance_exists) {
    $instance = array(
      'entity_type'  => 'node',
      'bundle'       => $content_type,
      'field_name'   => 'civicrm_group_nodes_contact_ref',
      'label'        => $t('CiviCRM Contact'),
      'required'     => TRUE,
      'locked'     => TRUE,
      'widget'       => array(
        'type'  => 'civicrm_contact_ref_autocomplete',
      ),
    );
    field_create_instance($instance);
  }
}

/**
 * Implements hook_node_insert().
 *
 * When a new node is created, add them to CiviCRM groups depending on rules.
 */
function civicrm_group_nodes_node_insert($node) {
  civicrm_group_nodes_node_update($node);
}

/**
 * Implements hook_node_update().
 *
 * When a node is updated, add/remove them from CiviCRM groups according to rules.
 */
function civicrm_group_nodes_node_update($node) {
  if (!civicrm_initialize()) {
    return;
  }
  $groups = civicrm_group_nodes_get_groups($node->type, TRUE);
  if (count($groups)) {
    $contact_id = field_get_value($node, 'civicrm_group_nodes_contact_ref', 'contact_id');
    if ($contact_id) {
      if ($node->status) {
        // Add to group if node was published.
        civicrm_group_nodes_adjust_contact_groups($contact_id, $groups, 'add');
      }
      else {
        // Remove from group if node was unpublished.
        civicrm_group_nodes_adjust_contact_groups($contact_id, $groups, 'remove');
      }
    }
  }
}

/**
 * Implements hook_node_delete().
 *
 * When a node is deleted, remove the contact from CiviCRM groups according to
 * rules.
 */
function civicrm_group_nodes_node_delete($node) {
  if (!civicrm_initialize()) {
    return;
  }
  $groups = civicrm_group_nodes_get_groups($node->type, TRUE);
  if (count($groups)) {
    $contact_id = field_get_value($node, 'civicrm_group_nodes_contact_ref', 'contact_id');
    if ($contact_id) {
      civicrm_group_nodes_adjust_contact_groups($contact_id, $groups, 'remove');
    }
  }
}

/**
 * Implements hook_civicrm_post().
 *
 * This provides sync from CiviCRM -> Backdrop
 */
function civicrm_group_nodes_civicrm_post($op, $objectName, $objectId, &$objectRef) {
  if (!civicrm_initialize()) {
    return;
  }
  if ($objectName != 'GroupContact') {
    // We only care about Group contact operations, so bail on anything else.
    return;
  }

  $group_id = $objectId;

  // Do we have any Content type sync rules for this Group?
  $content_types = civicrm_group_nodes_get_content_types($group_id);

  $rulesProcessed = array();
  foreach ($content_types as $content_type) {
    foreach ($objectRef as $contact_id) {
      if (isset($rulesProcessed[$content_type])) {
        continue;
      }

      switch ($op) {
        case 'create':
          // Contact added to group; add a node.
          $rulesProcessed[$content_type] = $content_type;
          civicrm_group_nodes_add_node($contact_id, $content_type);
          break;

        case 'edit':
          // "Edit" denotes both rejoining or being deleted from a group,
          // need to check which to perform appropriate action.
          $rulesProcessed[$content_type] = $content_type;
          $groups = civicrm_api3('GroupContact', 'get', [
            'sequential' => 1,
            'contact_id' => $contact_id,
            'group_id' => $group_id,
          ]);
          if ($groups['count'] > 0) {
            // Contact rejoined the group; recreate or publish node.
            civicrm_group_nodes_add_node($contact_id, $content_type);
          }
          else {
            // Contact no longer belongs to group: unpublish corresponding node,
            // but only if they are in no other groups that grant this node.
            if (!civicrm_node_granted_by_other_group($contact_id, $content_type, $group_id)) {
              civicrm_group_nodes_unpub_node($contact_id, $content_type);
            }
          }
          break;

        case 'delete':
          $rulesProcessed[$content_type] = $content_type;
          // Contact is removed from group.
          // Unpublish the node, but only if the contact is in no other groups that grant this node.
          if (!civicrm_node_granted_by_other_group($contact_id, $content_type, $group_id)) {
            civicrm_group_nodes_unpub_node($contact_id, $content_type);
          }
          break;
      }
    }
  }
}

/**
 * Helper function to add or publish a node for a given contact
 *
 * @param int $contact_id
 *   The CiviCRM id of the contact to modify.
 * @param string $content_type
 *   The content type being added.
 */
function civicrm_group_nodes_add_node($contact_id, $content_type) {
  $node = civicrm_group_nodes_get_node($contact_id, $content_type);
  if (!$node) {
    // No node exists -- create and publish a node.
    if (!civicrm_initialize()) {
      return;
    }
    $node = entity_create('node', array(
      'type' => $content_type,
      'uid' => 1,
      'status' => 1,
      'comment' => 1,
      'promote' => 0,
    ));
    $nodewrapper = entity_metadata_wrapper('node', $node);
    $contact = civicrm_api3('Contact', 'get', [
      'sequential' => 1,
      'return' => ["display_name"],
      'id' => $contact_id,
    ]);
    if (!$contact['is_error'] && $contact['count'] == 1) {
      $nodewrapper->title->set($contact['values'][0]['display_name']);
      $nodewrapper->civicrm_group_nodes_contact_ref->set($contact_id);
      $nodewrapper->save();
    }
  } else {
    // Publish this node if necessary.
    if (!$node->status) {
      $node->status = 1;
      $node->save();
    }
  }
}

/**
 * Helper function to unpublish a node for a given contact
 *
 * @param $contact_id
 *   The contact id of the node to modify
 * @param $content_type
 *   The content type of the node being removed
 */
function civicrm_group_nodes_unpub_node($contact_id, $content_type) {
  $node = civicrm_group_nodes_get_node($contact_id, $content_type);
  if (!$node) {
    // Skip unpublishing the node for the contact if they don't have one.
    return;
  } else {
    // Unpublish this node.
    if ($node->status) {
      $node->status = 0;
      $node->save();
    }
  }
}


/**
 * Helper function to retrieve a node for a given contact and content type.
 * Returns a node object or FALSE if no node exists.
 *
 * @param $contact_id
 *   The contact id of the node to modify
 * @param $content_type
 *   The content type of the node being removed
 */
function civicrm_group_nodes_get_node($contact_id, $content_type) {
  // Check if a node exists for this contact and content type.
  $query = db_select('node', 'n');
  $query->join('field_data_civicrm_group_nodes_contact_ref', 'civicontact', 'civicontact.entity_id = n.nid');
  $query->fields('n', array('title','nid'))
    ->condition('n.type', $content_type, '=')
    ->condition('civicontact.entity_type', 'node', '=')
    ->condition('civicontact.bundle', $content_type, '=')
    ->condition('civicontact.civicrm_group_nodes_contact_ref_contact_id', $contact_id, '=')
    ->orderBy('created', 'DESC')
    ->range(0, 1);
    $results = $query->execute();

  foreach ($results as $result) {
    if ($result) {
      return node_load($result->nid);
    }
    else {
      return NULL;
    }
  }
}

/**
 * Count the groups this contact is in which grant this node type.
 */
function civicrm_node_granted_by_other_group($contact_id, $content_type, $group_id) {
  if (!civicrm_initialize()) {
    return;
  }

  // Get all the groups this contact belongs to.
  $result = civicrm_api3('GroupContact', 'get', [
    'sequential' => 1,
    'contact_id' => $contact_id,
  ]);
  // If there was an error, don't do anything destructive.
  if ($result['is_error']) {
    return TRUE;
  }
  else {
    if ($result['count'] == 0) {
      // Contact is not in *any* other groups so unpublish the node.
      return FALSE;
    }
    else {
      // Contact is in some groups, determine if any of them grant this node type.
      $rule_groups = civicrm_group_nodes_get_groups($content_type);
      foreach ($result['values'] as $contact_group_id => $contact_group) {
        if (in_array($contact_group_id, $rule_groups)) {
          return TRUE;
        }
      }
    }
  }
  return FALSE;
}

/**
 * Implements hook_menu().
 */
function civicrm_group_nodes_menu() {
  $items = array();
  $items['admin/config/civicrm/civicrm_group_nodes/manual_sync'] = array(
    'title' => 'Manually synchronize',
    'page callback' => 'backdrop_get_form',
    'page arguments' => array('civicrm_group_nodes_manual_sync'),
    'access callback' => 'user_access',
    'access arguments' => array('access civicrm group node setting'),
    'type' => MENU_LOCAL_TASK,
  );
  $items['admin/config/civicrm/civicrm_group_nodes/settings'] = array(
    'title' => 'Settings',
    'page callback' => 'backdrop_get_form',
    'page arguments' => array('civicrm_group_nodes_settings'),
    'access callback' => 'user_access',
    'access arguments' => array('access civicrm group node setting'),
    'type' => MENU_LOCAL_TASK,
  );
  return $items;
}

/**
 * Implements hook_permission().
 */
function civicrm_group_nodes_permission() {
  return array(
    'access civicrm group node setting' => array(
      'title' => t('Access CiviCRM group node setting'),
      'description' => t('Access Civicrm group nodes synchronization.'),
    ),
  );
}

/**
 * Helper function to add or remove a specific CiviCRM contact from groups.
 *
 * @param int $contact_id
 *   * CiviCRM Contact ID.
 * @param array|NULL $groups
 *   * List of CiviCRM group IDs to add/remove, or NULL to add/remove from all groups.
 * @param string $op
 *   * Either "add" or "remove".
 */
function civicrm_group_nodes_adjust_contact_groups(int $contact_id, array $groups, string $op) {
  if (!civicrm_initialize()) {
    return;
  }

  if ($op == 'add') {
    $group_status = 'Added';
  }
  elseif ($op == 'remove') {
    $group_status = 'Removed';
  }
  else {
    return;
  }

  if (count($groups)) {
    $result = civicrm_api3('GroupContact', 'create', [
      'group_id' => $groups,
      'contact_id' => $contact_id,
      'status' => $group_status,
    ]);
  }
  else if ($groups == NULL) {
    
  }
}

/**
 * Manual sync form. Provides a submit button to manually sync groups to nodes.
 *
 * @ingroup forms
 * @see civicrm_group_nodes_manual_sync_submit()
 */
function civicrm_group_nodes_manual_sync() {
  $form = array();
  $form['manual_sync'] = array(
    '#type' => 'fieldset',
    '#title' => t('Manual Synchronization'),
    '#description' => t('Manually synchronize CiviCRM group membership and Backdrop nodes according to the current association rules. This process may take a long time.'),
  );
  $form['manual_sync']['manual_sync_submit'] = array(
    '#type' => 'submit',
    '#value' => t('Synchronize now'),
  );
  return $form;
}

/**
 * Implements hook_submit().
 *
 * Dor the manual sync form.
 */
function civicrm_group_nodes_manual_sync_submit($form, &$form_state) {
  if (!civicrm_initialize()) {
    return;
  }

  return civicrm_group_nodes_batch_init();
}

/**
 * Batch functions to manually update large number of nodes.
 *
 * See civicrm_group_nodes_batch_worker().
 */
function civicrm_group_nodes_batch_init() {

  $batch = array(
    'title' => t('Updating Nodes...'),
    'operations' => array(),
    'init_message' => t('Starting Update'),
    'progress_message' => t('Processed @current out of @total.'),
    'error_message' => t('An error occurred during processing'),
    'finished' => 'civicrm_group_nodes_batch_finished',
    'progressive' => FALSE,
  );

  // Find all contact IDs in CiviCRM groups that should have published nodes.
  // Get all groups from config.
  $group_ids = civicrm_group_nodes_get_groups();
  $processed_groups = array();
  $contacts = array();
  foreach ($group_ids as $group_id) {
    if (empty($processed_groups[$group_id])) {
      // Get all contacts in this group.
      $contacts_in_group = civicrm_group_nodes_get_group_contacts($group_id);
      foreach ($contacts_in_group as $contact_in_group) {
        $contacts[$contact_in_group['contact_id']] = $contact_in_group['contact_id'];
      }
    }
    $processed_groups[$group_id] = TRUE;
  }

  // Find out if any contacts have been removed from groups but still have
  // published nodes.
  // Get all contact IDs from published nodes.
  $content_types = civicrm_group_nodes_get_content_types();
  foreach ($content_types as $content_type) {
    $query = db_select('node', 'n');
    $query->join('field_data_civicrm_group_nodes_contact_ref', 'civicontact', 'civicontact.entity_id = n.nid');
    $query->fields('civicontact', array('civicrm_group_nodes_contact_ref_contact_id'))
      ->condition('n.type', $content_type, '=')
      ->condition('n.status', 1, '=')
      ->condition('civicontact.entity_type', 'node', '=')
      ->condition('civicontact.bundle', $content_type, '=')
      ->condition('civicontact.civicrm_group_nodes_contact_ref_contact_id', 0, '>')
      ->orderBy('created', 'DESC');
    $results = $query->execute();
    foreach ($results as $result) {
      $contacts[$result->civicrm_group_nodes_contact_ref_contact_id] = $result->civicrm_group_nodes_contact_ref_contact_id;
    }
  }

  foreach ($contacts as $contact_id) {
    // Add an operation to create a node for this contact.
    $batch['operations'][] = array('civicrm_group_nodes_batch_worker', array($contact_id));
  }

  batch_set($batch);
  batch_process('admin/config/civicrm/civicrm_group_nodes');
}

/**
  * Callback used in civicrm_group_nodes_batch_init().
  *
  */
function civicrm_group_nodes_batch_worker(int $contact_id, &$context) {
  if (!civicrm_initialize()) {
    return;
  }
  // Sync content status for contact depending on status in CiviCRM group.
  civicrm_group_nodes_sync_nodes($contact_id);

  if (empty($context['results'])) {
    $context['results']['processed'] = 0;
  }
  $context['results']['processed']++;
}

/**
 *
 */
function civicrm_group_nodes_batch_finished($success, $results, $operations) {
  if ($success) {
    $message = format_plural($results['processed'], 'One node processed.', '@count nodes processed.');
  }
  else {
    $message = 'some errors';
  }

  backdrop_set_message($message);
}

/**
 * Filters invalid groups out of a civicrm_group_nodes_rules query result.
 * For example, deleted groups and smart groups (so we don't try to add contacts
 * statically to a smart group).
 *
 * @param array $groups
 *   Result of a civicrm_group_nodes_get_groups() -
 *   An array of group_id values.
 * @return array
 */
function _civicrm_group_nodes_validate_groups(array $groups) {
  foreach ($groups as $key => $groupId) {
    $group_result = civicrm_api('Group', 'get', array(
      'group_id' => $groupId,
      'sequential' => 1,
      'version' => 3,
    ));

    // CRM-16033: Ensure the group hasn't been deleted
    if ($group_result['count'] === 0) {
      $msg = 'Error: Cannot add contact to nonexistent group (ID @groupId)';
      $variables = array('@groupId' => $groupId);
      watchdog('civicrm_group_nodes', $msg, $variables, WATCHDOG_ERROR);
      unset($groups[$key]);
      continue;
    }

    // CRM-11161: Exclude smart groups as we don't want to add contacts statically to a smart group.
    foreach ($group_results as $group_result) {
      if (!empty($group_result['saved_search_id'])) {
        if (civicrm_group_nodes_debugmode() !== NULL) {
          $msg = 'Group ID @groupId is a smart group, so the contact was not added to it statically.';
          $variables = array('@groupId' => $groupId);
          watchdog('civicrm_group_nodes', $msg, $variables, WATCHDOG_INFO);
        }
        unset($groups[$key]);
        continue;
      }
    }
  }
  return $groups;
}

/**
 * Helper function to add/publish and unpublish nodes for a contact depending on
 * the groups they are a member of.
 *
 * @param int $contact_id
 *   The CiviCRM ID for the contact being processed.
 */
function civicrm_group_nodes_sync_nodes(int $contact_id) {
  if (!civicrm_initialize()) {
    return;
  }

  $groups = civicrm_group_nodes_get_groups();
  foreach ($groups as $group) {
    $contact_is_in_group = civicrm_group_nodes_check_group_contact($group, $contact_id);
    $content_types = civicrm_group_nodes_get_content_types($group);
    foreach ($content_types as $content_type) {
      if ($contact_is_in_group) {
        if (civicrm_group_nodes_debugmode()) {
          $message = 'Content of type @type should be published for contact @contact because they are in group @group.';
          $params = array(
            '@type' => $content_type,
            '@contact' => $contact_id,
            '@group' => $group,
          );
          watchdog('civicrm_group_nodes', $message, $params, WATCHDOG_INFO);
          civicrm_group_nodes_add_node($contact_id, $content_type);
        }
      }
      else {
        if (civicrm_group_nodes_debugmode()) {
          $message = 'Content of type @type should be unpublished for contact @contact because they are not in group @group.';
          $params = array(
            '@type' => $content_type,
            '@contact' => $contact_id,
            '@group' => $group,
          );
          watchdog('civicrm_group_nodes', $message, $params, WATCHDOG_INFO);
        }
        civicrm_group_nodes_unpub_node($contact_id, $content_type);
      }
    }
  }
}

/**
  * Helper function to check if a contact is in a specific group.
  *
  * @param int $group_id
 *   The CiviCRM Group ID to check.
  * @param int $contact_id
 *   The CiviCRM ID for the contact to check.
  *
  * @return bool TRUE if contact is in the group, otherwise FALSE.
  */
function civicrm_group_nodes_check_group_contact(int $group_id, int $contact_id) {
  if (!civicrm_initialize()) {
    return;
  }
  // Based on CRM-11161: Don't use GroupContact since it doesn't work with
  // Smart Groups.
  $result = civicrm_api3('Contact', 'get', [
    'sequential' => 1,
    'group' => $group_id,
    'id' => $contact_id,
  ]);
  if ($result['count'] > 0) {
    return TRUE;
  }
  else {
    return FALSE;
  }
}

/**
  * Helper function to return all contacts from a specific group.
  *
  * @param int $group_id
 *   The CiviCRM Group ID to check.
  *
  * @return Civi\Api4\Generic\Result of CiviCRM contact IDs, or an empty array if none found.
  */
function civicrm_group_nodes_get_group_contacts(int $group_id) {
  if (!civicrm_initialize()) {
    return;
  }
  // Based on CRM-11161: Don't use GroupContact since it doesn't work with
  // Smart Groups.
  $result = civicrm_api3('Contact', 'get', [
    'sequential' => 1,
    'return' => ["id"],
    'group' => $group_id,
    'is_deleted' => 0,
    'options' => ['limit' => 0],
  ]);
  if ($result['count'] > 0) {
    return $result['values'];
  }
  return array();
}

/**
 * Settings form
 *
 * @ingroup forms
 */
function civicrm_group_nodes_settings($form, &$form_state) {

  $form['#config'] = 'civicrm_group_nodes.settings';
  $form['debugmode'] = array(
    '#type' => 'checkbox',
    '#title' => t('Enable detailed database logging'),
    '#default_value' => civicrm_group_nodes_debugmode(),
    '#description' => 'Log the details of nodes that are added, published, or unpublished for contacts.',
  );

  // Default handler to save form configuration.
  return system_settings_form($form);
}

/**
 *
 * Helper function to pull CiviCRM groups that are associated with a rule.
 * If no Backdrop content type is specified it will return all groups,
 * otherwise only those associated with the content type provided.
 *
 * @param string $content_type
 *   The content type to get group rules for. If empty, all group rules will be
 *   returned.
 * @param bool $validate_groups
 *   Whether to validate groups that are returned (ie. check for deleted groups
 *   and filter out smart groups.
 *
 */
function civicrm_group_nodes_get_groups(string $content_type = '', $validate_groups = FALSE) {
  $groups = array();

  $rules = config_get_names_with_prefix('civicrm_group_nodes.rules');
  foreach ($rules as $rule) {
    $config = config($rule);
    if (empty($content_type) || $content_type == $config->get('content_type')) {
      $groups[] = $config->get('group');
    }
  }
  if ($validate_groups) {
    $groups = _civicrm_group_nodes_validate_groups($groups);
  }
  return $groups;
}

/**
 *
 * Helper function to pull Backdrop content types that are associated with a
 * rule.
 *
 * If no CiviCRM group ID is specified it will return all used content types,
 * otherwise only those associated with the group ID provided.
 *
 */
function civicrm_group_nodes_get_content_types (int $group_id = 0) {
  $content_types = array();
  $rules = config_get_names_with_prefix('civicrm_group_nodes.rules');
  foreach ($rules as $rule) {
    $config = config($rule);
    if ((!$group_id) || $group_id == $config->get('group')) {
      $content_types[] = $config->get('content_type');
    }
  }
  return $content_types;
}

/**
 *
 */
function civicrm_group_nodes_debugmode () {
  return config_get('civicrm_group_nodes.settings', 'debugmode');
}
